;/*******************************************************
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;unsigned char step[4] = {0x09 , 0x05 , 0x06 ,0x0A} ;

	.DSEG
;int i, time  ;
;bit SWITCH = 0 , inverse ;
;
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0011 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0012 TCNT0=0x83;  // TIME  = 1mS
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0013 time++ ;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0014 PORTC.0 =! PORTC.0 ;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0015 
; 0000 0016    if(time >4)
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0017     {
; 0000 0018 
; 0000 0019     PORTC.1 =! PORTC.1 ;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 001A     time = 0 ;
;PCODE: $0000002B VOL: 0
; 0000 001B 
; 0000 001C         if(SWITCH == 1)
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 001D         {  PORTB = step[i];
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 001E 
; 0000 001F             if(inverse == 0)
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0020             {
; 0000 0021             i++ ;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0022             if(i == 4) i = 0 ;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0023             }
;PCODE: $0000003D VOL: 0
; 0000 0024             else
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0025             {
; 0000 0026             if(i == 0) i = 4 ;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0027             i-- ;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0028             }
;PCODE: $00000048 VOL: 0
; 0000 0029         }
; 0000 002A     }
;PCODE: $00000049 VOL: 0
; 0000 002B 
; 0000 002C     if(PINC.2 == 0 ) SWITCH =! SWITCH ;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 002D     if(PINC.3 == 0 ) inverse =! inverse ;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 002E 
; 0000 002F }
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;
;
;void main(void)
; 0000 0033 {
;PCODE: $0000005C VOL: 0
; 0000 0034 
; 0000 0035 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (1<<CS01) | (1<<CS00);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0036 TCNT0=0x83;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0037 OCR0=0x00;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0038 TIMSK = 0X01 ;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0039 
; 0000 003A 
; 0000 003B DDRB = 0X0F;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 003C DDRC.0 = 1 ;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 003D DDRC.1 = 1 ;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 003E 
; 0000 003F #asm("sei")
;PCODE: $0000006B VOL: 0
	sei
;PCODE: $0000006C VOL: 0
; 0000 0040 
; 0000 0041 
; 0000 0042 
; 0000 0043 }
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
